heat_template_version: 2017-02-24

description: Escenario de demonstracion completo, con ExtNet ya creada

parameters:
    ExtNet_name:
        type: string
        description: Nombre de la red externa

    net1_name:
        type: string
        description: Nombre de la red interna
    
    subnet1_name:
        type: string
        description: Nombre de la subred asociada a la red interna
    
    subnet1_gateway:
        type: string
        description: Gateway de la subred asociada a la red interna
        
    subnet1_dns:
        type: string
        description: Servidor DNS de la subred
        
    subnet1_cidr:
        type: string
        description: CIDR de la subred
        
    subnet1_start:
        type: string
        description: Start of the allocation pool 
        
    subnet1_end:
        type: string
        description: End of the allocation pool
       
    r1_name:
        type: string
        description: Nombre del router

    ssh_security_group_name:
        type: string
        description: Nombre del grupo de seguridad por acceso a ssh

    http_security_group_name:
        type: string
        description: Nombre del grupo de seguridad por acceso a http

    vm-postgres_image:
        type: string
        description: Tipo de imagen para la vm de la base de datos

    vm-web_image:
        type: string
        description: Tipo de imagen para el servidor web

    vm-postgres_flavor:
        type: string
        description: Tipo de flavor para la vm de la base de datos
    
    vm-web_flavor:
        type: string
        description: Tipo de flavor para el servidor web
        
resources:
    net1:
        type: OS::Neutron::ProviderNet
        properties:
            name: { get_param: net1_name }
            network_type: vlan
            
    subnet1:
        depends_on: [net1]
        type: OS::Neutron::Subnet 
        properties:
            name: { get_param: subnet1_name }
            network_id: { get_resource: net1 }
            gateway_ip: { get_param: subnet1_gateway }
            dns_nameservers: [{ get_param: subnet1_dns }]
            cidr: { get_param: subnet1_cidr }
            allocation_pools: 
                - { start: { get_param: subnet1_start }, end: { get_param: subnet1_end }}

    r1:
        type: OS::Neutron::Router
        properties:
            name: { get_param: r1_name }
            external_gateway_info:
                network: { get_param: ExtNet_name }
    
    r1_interface0:
        depends_on: [r1, subnet1]
        type: OS::Neutron::RouterInterface
        properties:
            router_id: { get_resource: r1 }
            subnet_id: { get_resource: subnet1}
            
    ssh_security_group:
        type: OS::Neutron::SecurityGroup 
        properties:
            description: SSH security group
            name: { get_param: ssh_security_group_name }
            rules:
            -   remote_ip_prefix: 0.0.0.0/0 
                protocol: tcp 
                port_range_min: 22 
                port_range_max: 22

    http_security_group:
        type: OS::Neutron::SecurityGroup 
        properties:
            description: HTTP security group
            name: { get_param: http_security_group_name }
            rules:
            -   remote_ip_prefix: 0.0.0.0/0 
                protocol: tcp 
                port_range_min: 80 
                port_range_max: 80
       
    vm-postgres_net1_port:
        depends_on: [net1, ssh_security_group]
        type: OS::Neutron::Port
        properties:
            network_id: { get_resource: net1 }
            security_groups: 
                - { get_resource: ssh_security_group }

    vm-web_net1_port:
        depends_on: [net1, ssh_security_group]
        type: OS::Neutron::Port
        properties:
            network_id: { get_resource: net1 }
            security_groups: 
                - { get_resource: ssh_security_group }
                - { get_resource: http_security_group }
            
    vm-postgres_floating_ip:
        depends_on: [vm-postgres_net1_port]
        type: OS::Neutron::FloatingIP
        properties:
            floating_network_id: { get_param: ExtNet_name }
            port_id: { get_resource: vm-postgres_net1_port }

    vm-web_floating_ip:
        depends_on: [vm-web_net1_port]
        type: OS::Neutron::FloatingIP
        properties:
            floating_network_id: { get_param: ExtNet_name }
            port_id: { get_resource: vm-web_net1_port }

    vm-postgres:
        depends_on: [vm-postgres_net1_port, vm-postgres_conf]
        type: OS::Nova::Server
        properties:
            image: { get_param: vm-postgres_image }
            flavor:  { get_param: vm-postgres_flavor }
            networks:
            - port: { get_resource: vm-postgres_net1_port }
            user_data_format: RAW
            user_data: { get_resource: vm-postgres_conf }

    vm-web:
        depends_on: [vm-web_net1_port, vm-web_conf]
        type: OS::Nova::Server
        properties:
            image: { get_param: vm-web_image }
            flavor:  { get_param: vm-web_flavor }
            networks:
            - port: { get_resource: vm-web_net1_port }
            user_data_format: RAW
            user_data: { get_resource: vm-web_conf }
            
    vm-web_conf:
        type: OS::Heat::CloudConfig
        properties:
            cloud_config: 
                manage_etc_hosts: true
                packages:
                - python3-pip
                - nginx
                runcmd:
                - pip3 install Django psycopg2
                - git clone https://github.com/kaloyan-veselinov/CNVR_django_demo.git /web
                - ufw allow 'Nginx Full'
                - systemctl start nginx

    vm-postgres_conf:
        type: OS::Heat::CloudConfig
        properties:
            cloud_config: 
                manage_etc_hosts: true
                packages:
                - docker.io
                runcmd: 
                - docker pull postgres:alpine 
               
outputs:
    vm-web_id:
        description: Id of the web server VM
        value: { get_resource: vm-web }

    vm-postgres_id:
        description: Id of the postgresql VM
        value: { get_resource: vm-postgres }

